AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template to build a serverless web application with specified adjustments

Parameters:
  BucketName:
    Type: String
    Description: Name of the S3 Bucket for static website hosting
  DynamoDBTableName:
    Type: String
    Description: Name of the DynamoDB table
    Default: Contacts
  LambdaFunctionName:
    Type: String
    Description: Name of the Lambda function to write to DynamoDB
    Default: AddContactInfo
  EmailLambdaFunctionName:
    Type: String
    Description: Name of the Lambda function to send emails via SES
    Default: SendContactInfoEmail
  ApiGatewayName:
    Type: String
    Description: Name of the API Gateway
    Default: ContactFormAPI
  CodePipelineName:
    Type: String
    Description: Name of the CodePipeline
    Default: myServerlessAppPipeline
  GitHubRepo:
    Type: String
    Description: "GitHub repository (format: owner/repo)"
    Default: MubasharSadiq/myServerlessWebApp
  GitHubBranch:
    Type: String
    Description: GitHub branch to use
    Default: main
  CodeStarConnectionArn:
    Type: String
    Description: ARN of the existing CodeStar Connection
  SESFromEmail:
    Type: String
    Description: Verified SES email address to send emails from
  LambdaRoleToAccessDynamoDBArn:
    Type: String
    Description: ARN of the existing IAM role for Lambda to access DynamoDB
  LambdaRoleToAccessSESArn:
    Type: String
    Description: ARN of the existing IAM role for Lambda to access SES and DynamoDB Streams

Resources:
  # S3 Bucket for Static Website Hosting
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # Bucket Policy to Allow Public Read Access
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticWebsiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: "s3:GetObject"
            Resource: !Join ['', [!GetAtt StaticWebsiteBucket.Arn, '/*']]

  # DynamoDB Table
  ContactsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      AttributeDefinitions:
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: timestamp
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  # Lambda Function to Write to DynamoDB
  AddContactInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: index.lambda_handler
      Runtime: python3.8
      Role: !Ref LambdaRoleToAccessDynamoDBArn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTableName
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime
          import os

          def lambda_handler(event, context):
              # Connect to DynamoDB table
              db = boto3.resource('dynamodb')
              table = db.Table(os.environ['DYNAMODB_TABLE'])
              
              # Create timestamp
              dateTime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
              
              try:
                  # Get contact info from request
                  payload = json.loads(event['body'])
                  
                  # Add row with contact info to DynamoDB
                  table.put_item(
                      Item={
                          'timestamp': dateTime,
                          'name': payload['name'],
                          'email': payload['email'],
                          'message': payload['message']
                      }
                  )
                  
                  # Return success response
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Successfully saved contact info!'),
                      'headers': {
                          "Access-Control-Allow-Origin": "*",
                          "Access-Control-Allow-Credentials": True,
                      }
                  }
              
              except Exception as e:
                  # Log error and return error response
                  print(f"Error: {e}")
                  return {
                      'statusCode': 400,
                      'body': json.dumps('Error saving contact info'),
                      'headers': {
                          "Access-Control-Allow-Origin": "*",
                          "Access-Control-Allow-Credentials": True,
                      }
                  }

  # API Gateway to Expose Lambda Function
  ContactFormApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiGatewayName

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ContactFormApi.RootResourceId
      PathPart: addcontactinfo
      RestApiId: !Ref ContactFormApi

  ApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactFormApi
      ResourceId: !Ref ApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - { LambdaArn: !GetAtt AddContactInfoFunction.Arn }
      MethodResponses:
        - StatusCode: 200

  # OPTIONS Method for CORS
  ApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ContactFormApi
      ResourceId: !Ref ApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Permission for API Gateway to Invoke Lambda Function
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AddContactInfoFunction
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/POST/addcontactinfo'
        - { ApiId: !Ref ContactFormApi }

  # API Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiMethod
      - ApiOptionsMethod
    Properties:
      RestApiId: !Ref ContactFormApi
      StageName: default

  # Lambda Function for Email Notifications
  SendContactInfoEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref EmailLambdaFunctionName
      Handler: index.lambda_handler
      Runtime: python3.8
      Role: !Ref LambdaRoleToAccessSESArn
      Environment:
        Variables:
          FROM_EMAIL: !Ref SESFromEmail
          DYNAMODB_TABLE: !Ref DynamoDBTableName
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          def lambda_handler(event, context):
              dynamodb = boto3.resource('dynamodb', region_name=os.environ['AWS_REGION'])
              table = dynamodb.Table(os.environ['DYNAMODB_TABLE'])
              ses = boto3.client('ses')

              try:
                  # Scan the DynamoDB table
                  result = table.scan()
                  items = result.get('Items', [])

                  if not items:
                      return {
                          'statusCode': 400,
                          'body': json.dumps('No contact information found.')
                      }

                  # Sort items to get the latest entry
                  items.sort(key=lambda x: x['timestamp'], reverse=True)
                  latest_contact = items[0]

                  # Format the email body
                  body = f"""
                  Contact Information:
                  Timestamp: {latest_contact['timestamp']}
                  Name: {latest_contact['name']}
                  Email: {latest_contact['email']}
                  Message: {latest_contact['message']}
                  """

                  # Send email
                  ses.send_email(
                      Source=os.environ['FROM_EMAIL'],
                      Destination={
                          'ToAddresses': [latest_contact['email']]
                      },
                      Message={
                          'Subject': {
                              'Data': 'Thank You for Your Message!',
                              'Charset': 'UTF-8'
                          },
                          'Body': {
                              'Text': {
                                  'Data': body,
                                  'Charset': 'UTF-8'
                              }
                          }
                      }
                  )

                  return {
                      'statusCode': 200,
                      'body': json.dumps('Email successfully sent!')
                  }

              except Exception as e:
                  print(f"Error: {e}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f"Error sending email: {str(e)}")
                  }

  # Event Source Mapping from DynamoDB Streams to Lambda
  DynamoDBStreamToLambda:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt ContactsTable.StreamArn
      FunctionName: !Ref SendContactInfoEmailFunction
      StartingPosition: LATEST
      Enabled: true

  # S3 Bucket for CodePipeline Artifacts
  CodePipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketName}-artifacts'

  # IAM Role for CodePipeline
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketName}/*'
                  - !Sub 'arn:aws:s3:::${BucketName}-artifacts/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketName}'
                  - !Sub 'arn:aws:s3:::${BucketName}-artifacts'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref CodeStarConnectionArn

  # CodePipeline to Automate Deployments
  MyCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref CodePipelineName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: !Ref GitHubRepo
                BranchName: !Ref GitHubBranch
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                BucketName: !Ref StaticWebsiteBucket
                Extract: 'true'
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1

Outputs:
  WebsiteURL:
    Description: URL of the static website
    Value: !GetAtt StaticWebsiteBucket.WebsiteURL
  ApiEndpoint:
    Description: API endpoint URL
    Value: !Sub
      - 'https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/default/addcontactinfo'
      - { ApiId: !Ref ContactFormApi }